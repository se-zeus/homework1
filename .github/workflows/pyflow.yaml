name: CI for HW2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest autopep8 pylint radon bandit

    # Run pytest for unit testing
    - name: Run Pytest for HW2
      id: pytest_check
      run: |
        mkdir -p logs
        pytest --maxfail=1 --disable-warnings --junitxml=logs/pytest-report.xml
      continue-on-error: true

    - name: Capture Pytest result
      run: |
        if [ $? -eq 0 ]; then
          echo "PYTEST_BADGE_COLOR=brightgreen" >> $GITHUB_ENV
        else
          echo "PYTEST_BADGE_COLOR=red" >> $GITHUB_ENV
        fi

    # Run autopep8 for code formatting
    - name: Run AutoPEP8
      id: autopep8_check
      run: |
        autopep8 --in-place --aggressive --aggressive ./hw2/*.py
      continue-on-error: true

    - name: Capture AutoPEP8 result
      run: |
        if [ $? -eq 0 ]; then
          echo "AUTOPEP8_BADGE_COLOR=brightgreen" >> $GITHUB_ENV
        else
          echo "AUTOPEP8_BADGE_COLOR=red" >> $GITHUB_ENV
        fi

    # Run pylint for code linting
    - name: Run Pylint
      id: pylint_check
      run: |
        mkdir -p logs
        pylint hw2/*.py > logs/pylint_log.txt || true
      continue-on-error: true

    - name: Capture Pylint result
      run: |
        if grep -q "rated at" logs/pylint_log.txt; then
          echo "PYLINT_BADGE_COLOR=brightgreen" >> $GITHUB_ENV
        else
          echo "PYLINT_BADGE_COLOR=red" >> $GITHUB_ENV
        fi

    # Run Radon for cyclomatic complexity
    - name: Run Radon
      id: radon_check
      run: |
        mkdir -p logs
        radon cc ./hw2/ > logs/radon_log.txt
      continue-on-error: true

    - name: Capture Radon result
      run: |
        if grep "F" logs/radon_log.txt; then
          echo "RADON_BADGE_COLOR=red" >> $GITHUB_ENV
        else
          echo "RADON_BADGE_COLOR=brightgreen" >> $GITHUB_ENV
        fi

    # Run Bandit for security analysis
    - name: Run Bandit
      id: bandit_check
      run: |
        mkdir -p logs
        bandit -r ./hw2/ -f txt -o logs/bandit_log.txt || echo "No issues found" >> logs/bandit_log.txt
      continue-on-error: true

    - name: Capture Bandit result
      run: |
        if grep "No issues found" logs/bandit_log.txt; then
          echo "BANDIT_BADGE_COLOR=brightgreen" >> $GITHUB_ENV
        else
          echo "BANDIT_BADGE_COLOR=red" >> $GITHUB_ENV
        fi

    # Display logs (optional for debugging purposes)
    - name: Display Bandit log
      run: cat logs/bandit_log.txt

    - name: Display Pytest log
      run: cat logs/pytest-report.xml

    - name: Display Pylint log
      run: cat logs/pylint_log.txt

    # Update README with badges
    # - name: Update README with badges
    #   run: |
    #     RUN_LOG_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    #     PYLINT_BADGE_URL="https://img.shields.io/badge/Pylint-${{ env.PYLINT_BADGE_COLOR }}.svg"
    #     PYTEST_BADGE_URL="https://img.shields.io/badge/Pytest-${{ env.PYTEST_BADGE_COLOR }}.svg"
    #     AUTOPEP8_BADGE_URL="https://img.shields.io/badge/AutoPEP8-${{ env.AUTOPEP8_BADGE_COLOR }}.svg"
    #     RADON_BADGE_URL="https://img.shields.io/badge/Radon-${{ env.RADON_BADGE_COLOR }}.svg"
    #     BANDIT_BADGE_URL="https://img.shields.io/badge/Bandit-${{ env.BANDIT_BADGE_COLOR }}.svg"
        
    #     sed -i '/\[!\[badge_pylint\]/c\[!\[badge_pylint\]('"${PYLINT_BADGE_URL}"')]('"${RUN_LOG_URL}"')' README.md
    #     sed -i '/\[!\[badge_pytest\]/c\[!\[badge_pytest\]('"${PYTEST_BADGE_URL}"')]('"${RUN_LOG_URL}"')' README.md
    #     sed -i '/\[!\[badge_autopep8\]/c\[!\[badge_autopep8\]('"${AUTOPEP8_BADGE_URL}"')]('"${RUN_LOG_URL}"')' README.md
    #     sed -i '/\[!\[badge_radon\]/c\[!\[badge_radon\]('"${RADON_BADGE_URL}"')]('"${RUN_LOG_URL}"')' README.md
    #     sed -i '/\[!\[badge_bandit\]/c\[!\[badge_bandit\]('"${BANDIT_BADGE_URL}"')]('"${RUN_LOG_URL}"')' README.md

    #     git config --global user.name "github-actions[bot]"
    #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    #     git checkout main
    #     git pull
        
    #     if git diff --quiet; then
    #       echo "No changes to commit"
    #     else
    #       git add README.md
    #       git commit -m "Update README badges"
    #       git push
    #     fi

    # Fail the build if any tool failed

    # Generate Pylint badge
    - name: Generate pylint badge url
      run: |
        SCORE=$(grep -oP '(?<=rated at )[0-9]+\.[0-9]+' tmp/pylint_output.txt)
        if [ "$(echo "$SCORE < 5" | bc)" -eq 1 ]; then
          COLOR="red"
        elif [ "$(echo "$SCORE < 8" | bc)" -eq 1 ]; then
          COLOR="orange"
        elif [ "$(echo "$SCORE < 10" | bc)" -eq 1 ]; then
          COLOR="yellow"
        else
          COLOR="brightgreen"
        fi
        PYLINT_BADGE_URL="https://img.shields.io/badge/pylint-${SCORE}-${COLOR}"
        echo "PYLINT_BADGE_URL=$PYLINT_BADGE_URL" >> $GITHUB_ENV

    # Generate Pyright badge
    - name: Run Pyright and generate badge url
      run: |
        pyright || true
        BADGE_COLOR=$( [ $? -eq 0 ] && echo "passing-brightgreen" || echo "failing-red" )
        PYRIGHT_BADGE_URL="https://img.shields.io/badge/pyright-${BADGE_COLOR}"
        echo "PYRIGHT_BADGE_URL=$PYRIGHT_BADGE_URL" >> $GITHUB_ENV

    # Extract number of tests, coverage, and determine result
    - name: Extract number of tests, coverage, and determine result
      run: |
        NUM_TESTS=$(xmllint --xpath 'string(//testsuite/@tests)' tmp/pytest_output.xml)
        COVERAGE=$(jq '.totals.percent_covered' tmp/coverage.json | awk '{printf "%.0f", $1}')

        if [ ${{ env.PYTEST_EXIT_CODE }} -eq 0 ]; then
          TESTS_STATUS="passing"
          TESTS_COLOR="brightgreen"
        else
          TESTS_STATUS="failing"
          TESTS_COLOR="red"
        fi

        if [ "$COVERAGE" -ge 90 ]; then
          COVERAGE_COLOR="brightgreen"
        elif [ "$COVERAGE" -ge 80 ]; then
          COVERAGE_COLOR="green"
        elif [ "$COVERAGE" -ge 70 ]; then
          COVERAGE_COLOR="yellowgreen"
        elif [ "$COVERAGE" -ge 60 ]; then
          COVERAGE_COLOR="yellow"
        elif [ "$COVERAGE" -ge 50 ]; then
          COVERAGE_COLOR="orange"
        else
          COVERAGE_COLOR="red"
        fi

        TOTAL_TESTS_BADGE_URL="https://img.shields.io/badge/tests-${NUM_TESTS}-blue?logo=pytest&logoColor=white"
        CODE_COVERAGE_BADGE_URL="https://img.shields.io/badge/coverage-${COVERAGE}%25-${COVERAGE_COLOR}"
        PYTEST_STATUS_BADGE_URL="https://img.shields.io/badge/PyTest-${TESTS_STATUS}-${TESTS_COLOR}?logo=pytest&logoColor=white"

        echo "TOTAL_TESTS_BADGE_URL=$TOTAL_TESTS_BADGE_URL" >> $GITHUB_ENV
        echo "CODE_COVERAGE_BADGE_URL=$CODE_COVERAGE_BADGE_URL" >> $GITHUB_ENV
        echo "PYTEST_STATUS_BADGE_URL=$PYTEST_STATUS_BADGE_URL" >> $GITHUB_ENV

    # Update README badges
    - name: Update README with all the badges
      run: |
        RUN_LOG_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        sed -i '/\[!\[Pytest\]/c\[!\[Pytest\]('"$PYTEST_STATUS_BADGE_URL"')]('"$RUN_LOG_URL"')' README.md
        sed -i '/\[!\[Autopep8\]/c\[!\[Autopep8\]('"$TOTAL_TESTS_BADGE_URL"')]('"$RUN_LOG_URL"')' README.md
        sed -i '/\[!\[Radon\]/c\[!\[Radon\]('"$CODE_COVERAGE_BADGE_URL"')]('"$RUN_LOG_URL"')' README.md
        sed -i '/\[!\[Bandit\]/c\[!\[Bandit\]('"$PYRIGHT_BADGE_URL"')]('"$RUN_LOG_URL"')' README.md

        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git checkout main
        git pull

        if git diff --quiet; then
            echo "No changes to commit"
        else
            git add README.md
            git commit -m "Update all badges in README"
            git push

    # Fail if any tool failed
    - name: Fail if any tool failed
      run: |
        for TOOL in PYRIGHT PYLINT PYTEST; do
          EXIT_CODE_VAR="${TOOL}_EXIT_CODE"
          EXIT_CODE="${!EXIT_CODE_VAR}"

          echo "Checking exit code for $TOOL: $EXIT_CODE"

          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "$TOOL failed, marking job as failed."
            exit 1
          fi
        done
    
