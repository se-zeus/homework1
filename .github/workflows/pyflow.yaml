name: CI for HW2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest autopep8 radon bandit

      - name: Run pytest for HW2
        id: pytest_check
        run: pytest ./hw2/
        continue-on-error: true

      - name: Capture pytest result
        run: |
          if [ $? -eq 0 ]; then
            echo "PYTEST_BADGE_COLOR=brightgreen" >> $GITHUB_ENV
          else
            echo "PYTEST_BADGE_COLOR=red" >> $GITHUB_ENV
          fi

      - name: Run AutoPEP8
        id: autopep8_check
        run: |
          autopep8 --in-place --aggressive --aggressive ./hw2/*.py
        continue-on-error: true

      - name: Capture AutoPEP8 result
        run: |
          if [ $? -eq 0 ]; then
            echo "AUTOPEP8_BADGE_COLOR=brightgreen" >> $GITHUB_ENV
          else
            echo "AUTOPEP8_BADGE_COLOR=red" >> $GITHUB_ENV
          fi

      - name: Run Radon
        id: radon_check
        run: |
          mkdir -p logs
          radon cc ./hw2/ > logs/radon_log.txt
        continue-on-error: true

      - name: Capture Radon result
        run: |
          if grep "ERROR" logs/radon_log.txt; then
            echo "RADON_BADGE_COLOR=red" >> $GITHUB_ENV
          else
            echo "RADON_BADGE_COLOR=brightgreen" >> $GITHUB_ENV
          fi

      - name: Run Bandit
        id: bandit_check
        run: |
          mkdir -p logs
          bandit -r ./hw2/ -f txt -o logs/bandit_log.txt || echo "No issues found" > logs/bandit_log.txt
        continue-on-error: true

      - name: Capture Bandit result
        run: |
          if grep "ERROR" logs/bandit_log.txt; then
            echo "BANDIT_BADGE_COLOR=red" >> $GITHUB_ENV
          else
            echo "BANDIT_BADGE_COLOR=brightgreen" >> $GITHUB_ENV
          fi
      - name: Update README with all the badges
        run: |
         RUN_LOG_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
         
         # Update badges in README.md
         sed -i '/\[!\[badge_pylint\]/c\[!\[badge_pylint\]('"${PYLINT_BADGE_URL}"')]('"${RUN_LOG_URL}"')' README.md
         sed -i '/\[!\[badge_pyright\]/c\[!\[badge_pyright\]('"${PYRIGHT_BADGE_URL}"')]('"${RUN_LOG_URL}"')' README.md
         sed -i '/\[!\[badge_total_tests\]/c\[!\[badge_total_tests\]('"${TOTAL_TESTS_BADGE_URL}"')](https://github.com/gitsetgopack/hw2/tree/main/tests)' README.md
         sed -i '/\[!\[badge_code_coverage\]/c\[!\[badge_code_coverage\]('"${CODE_COVERAGE_BADGE_URL}"')]('"${RUN_LOG_URL}"')' README.md
         sed -i '/\[!\[badge_pytest_status\]/c\[!\[badge_pytest_status\]('"${PYTEST_STATUS_BADGE_URL}"')]('"${RUN_LOG_URL}"')' README.md
         
         # Remove tmp directory if exists
         rm -rf tmp
         
         # Configure git
         git config --global user.name "github-actions[bot]"
         git config --global user.email "github-actions[bot]@users.noreply.github.com"
         
         # Checkout the correct branch (main in your case)
         git checkout main
         
         # Pull the latest changes
         git pull
         
         # Stage all modified files for commit
         git add hw2/hw2_debugging.py hw2/rand.py hw2/test_merge.py README.md
 
         # Handle untracked files and update .gitignore
         echo "hw2/__pycache__/" >> .gitignore
         echo "logs/" >> .gitignore
         
         # Add .gitignore to the staged files
         git add .gitignore
         
         # Check for changes and commit
         if git diff --staged --quiet; then
             echo "No changes to commit"
         else
             git commit -m "Update all badges in README and commit changes"
             git push
         fi

      